#!/bin/bash

bcHeight=0
function setBcHeight()
{
	local -n ref=$1
	bcInfo=$(./cli getBlockchainInfo | sed -n 2p)
	# stdout to array delimited by " "
	arr=(${bcInfo// / })
	# get last index and return everything before ',' 
	height=${arr[-1]%,*} 
	if [[ $bcInfo == *"ERROR: GetBlockchainInfo failed."* ]]; then
  		echo "Error has occurred, make sure dapp service is running."; exit 1
	fi
	ref=$height
}

# set current blockchain height to bcHeight
setBcHeight bcHeight

# declare some variables
newBcHeight=0
addBalanceAmount=10
# check input argument exists
if [ -z "$1" ]
  then
    echo "Error: Missing argument. How many wallets do you want?"; exit 1
fi
# check input argument $1 is number
re='^[0-9]+$'
if ! [[ $1 =~ $re ]] ; then
   echo "Error: Not a number"; exit 1
fi
# check input arg $1 >= 2
if [ $1 -le 1 ];  then
	echo "Error: At least 2 wallets should be created"; exit 1
fi

# check input arg $2 >= 1
if [ $2 -le 1 ];  then
	echo "Error: Too few transactions"; exit 1
fi
# loop $1 times
for (( c=0; c<=$1; c++ )); do
	# create wallet, respond to every command line prompt with 'y' and read stdout
	output=$(yes | ./cli createWallet)
	while read -r line; do
		arr=(${line// / })
		# get address in output
		address=${arr[-1]}
		echo $address
		# create list of addresses
		accList[$c]=$address	
	done <<< "$output"
done

function reviewBalancesAndQuit()
{
	for i in "${accList[@]}"
	do 
	line=$(./cli getBalance -address $i)
	arr=(${line// / })	
	amount=${arr[-1]}
	echo "$i balance: $amount"
	done
	echo "Job done."
	exit 1
}
function sendFromMiner(){

	rand=${accList[$RANDOM % ${#accList[@]} ]}	
	# miner gives some money
	accRich[$counter]=$rand
	echo "adding $addBalanceAmount to ${accRich[$counter]}"
	./cli sendFromMiner -to ${accRich[$counter]} -amount $addBalanceAmount	
}
function transaction(){
	# create random amount (0-20)
	amount=$((RANDOM%(addBalanceAmount+10)))
	# from = last sendFromMiner address, to = random index in accList
	from=${accRich[$counter-1]}
	to=${accList[$RANDOM % ${#accList[@]} ]} 
	echo "sending $amount from $from to $to"
	./cli send -from $from -to $to -amount $amount # &>> log
}
counter=0
# block must be mined before sendFromMiner takes effect
sendFromMiner
while [ $counter -le $(($2+1)) ]; do
	if [ $bcHeight -lt $newBcHeight ]; then
       		((counter++))	
		if [ $counter -eq $(($2+1)) ]; then
			reviewBalancesAndQuit
		fi
		sendFromMiner
		transaction
		bcHeight=$newBcHeight
	       echo "waiting for miner to mint next block..."
	       echo "---------------------------"
	else
	       setBcHeight newBcHeight
	       sleep 1
       fi
done

