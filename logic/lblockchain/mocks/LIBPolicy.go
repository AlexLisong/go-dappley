// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LIBPolicy is an autogenerated mock type for the LIBPolicy type
type LIBPolicy struct {
	mock.Mock
}

// GetMaxProducers provides a mock function with given fields:
func (_m *LIBPolicy) GetMaxProducers() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetMinConfirmationNum provides a mock function with given fields:
func (_m *LIBPolicy) GetMinConfirmationNum() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetProducersString provides a mock function with given fields:
func (_m *LIBPolicy) GetProducersString() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsBypassingLibCheck provides a mock function with given fields:
func (_m *LIBPolicy) IsBypassingLibCheck() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsNonRepeatingBlockProducerRequired provides a mock function with given fields:
func (_m *LIBPolicy) IsNonRepeatingBlockProducerRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
