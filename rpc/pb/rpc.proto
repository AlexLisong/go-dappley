syntax = "proto3";
package rpcpb;
import "github.com/dappley/go-dappley/network/pb/peerlist.proto";
import "github.com/dappley/go-dappley/core/pb/block.proto";
import "github.com/dappley/go-dappley/core/pb/transaction.proto";

option objc_class_prefix = "HLW";

service RpcService {
  rpc RpcGetVersion (GetVersionRequest) returns (GetVersionResponse) {}
  rpc RpcGetBalance (GetBalanceRequest) returns (GetBalanceResponse) {}
  rpc RpcGetBlockchainInfo (GetBlockchainInfoRequest) returns (GetBlockchainInfoResponse) {}
  rpc RpcGetUTXO(GetUTXORequest) returns (GetUTXOResponse) {}
  rpc RpcGetBlocks(GetBlocksRequest) returns (GetBlocksResponse) {}
  rpc RpcGetBlockByHash(GetBlockByHashRequest) returns (GetBlockByHashResponse) {}
  rpc RpcGetBlockByHeight(GetBlockByHeightRequest) returns (GetBlockByHeightResponse) {}
  rpc RpcSendTransaction(SendTransactionRequest) returns (SendTransactionResponse) {}
  rpc RpcSendBatchTransaction(SendBatchTransactionRequest) returns (SendBatchTransactionResponse) {}
  rpc RpcGetNewTransactions(GetNewTransactionsRequest) returns (stream GetNewTransactionsResponse) {}
  rpc RpcGetAllTransactionsFromTxPool(GetAllTransactionsRequest) returns (GetAllTransactionsResponse) {}
}

service AdminService{
  rpc RpcAddPeer(AddPeerRequest) returns (AddPeerResponse) {}
  rpc RpcSend (SendRequest) returns (SendResponse) {}
  rpc RpcGetPeerInfo (GetPeerInfoRequest) returns (GetPeerInfoResponse) {}
  rpc RpcSendFromMiner (SendFromMinerRequest) returns (SendFromMinerResponse) {}
  rpc RpcAddProducer (AddProducerRequest) returns (AddProducerResponse) {}
  rpc RpcUnlockWallet (UnlockWalletRequest) returns (UnlockWalletResponse) {}
}

// Requests

message CreateWalletRequest {
  string passphrase = 1;
}

message UnlockWalletRequest {}

message AddProducerRequest {
  string address = 1;
}

message GetBalanceRequest {
  string address = 1;
}

message SendFromMinerRequest {
  string to = 1;
  bytes amount = 2;
}

message SendRequest {
  string from = 1;
  string to = 2;
  bytes amount = 3;
  string walletPath = 4;
  bytes tip = 5;
  string data = 6;
}

message GetPeerInfoRequest {}

message GetBlockchainInfoRequest {}

message AddPeerRequest {
  string fullAddress = 1;
}

message GetVersionRequest {
  string protoVersion = 1;
}

message GetUTXORequest {
  string address = 1;  //wallet address
}

message GetBlocksRequest {
  repeated bytes startBlockHashes = 1;  // Query start block hashes, sorted descending by height.
  int32 maxCount = 2;   // Max query block count
}

message GetBlockByHashRequest {
  bytes  hash = 1;
}

message GetBlockByHeightRequest {
  uint64 height = 1;
}

message SendTransactionRequest {
  corepb.Transaction transaction = 1;
}

message SendBatchTransactionRequest {
  repeated corepb.Transaction transaction = 1;
}

message GetNewTransactionsRequest {}

// Responses

message AddProducerResponse {}

message UnlockWalletResponse {}

message GetBalanceResponse {
  int64 amount = 1;
}

message SendFromMinerResponse {}

message SendResponse {
  string contractAddr = 1;
  string txid = 2;
}

message GetPeerInfoResponse {
  networkpb.Peerlist peerList = 1;
}

message GetBlockchainInfoResponse {
  bytes   tailBlockHash = 1;
  uint64  blockHeight = 2;
  repeated string producers = 3; // all producers' addresses
  int64   timestamp = 4;
}

message AddPeerResponse {}

message GetVersionResponse {
  string protoVersion = 1;
  string serverVersion = 2;
}

message GetUTXOResponse {
  repeated UTXO utxos = 1;
  repeated corepb.BlockHeader blockHeaders = 2; //The latest block headers
}

// TODO: Refactor to corepb.UTXO
message UTXO {
  bytes   amount = 1;   
  bytes   publicKeyHash = 2;
  bytes   txid = 3;     
  uint32  txIndex = 4;
}

message GetBlocksResponse {
  repeated corepb.Block blocks = 1;
}

message GetBlockByHashResponse {
  corepb.Block block = 1;
}

message GetBlockByHeightResponse {
  corepb.Block block = 1;
}

message SendTransactionResponse {}

message SendBatchTransactionResponse {
  repeated bool results = 1;
}

message GetNewTransactionsResponse {
  corepb.Transaction transaction = 1;
}

message GetAllTransactionsRequest{

}
message GetAllTransactionsResponse{
  repeated corepb.Transaction transactions = 1;
}
